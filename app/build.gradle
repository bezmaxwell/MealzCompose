plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
}

/**
 * The android block is where you configure all your Android-specific
 * build options.
 */
android {

    /**
     * compileSdkVersion specifies the Android API level Gradle should use to
     * compile your app. This means your app can use the API features included in
     * this API level and lower.
     */
    compileSdk 32

    /**
     * buildToolsVersion specifies the version of the SDK build tools, command-line
     * utilities, and compiler that Gradle should use to build your app. You need to
     * download the build tools using the SDK Manager.
     *
     * This property is optional because the plugin uses a recommended version of
     * the build tools by default.
     */
    buildToolsVersion '30.0.3'

    defaultConfig {
        applicationId "com.example.mealzcompose"
        minSdk 24
        targetSdk 32
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        vectorDrawables {
            useSupportLibrary true
        }
    }

    // Observação: incluir as senhas da chave de lançamento e do keystore dentro do arquivo de build
    // não é uma prática de segurança recomendada. Como alternativa, você pode configurar o arquivo do
    // build para extrair essas senhas de variáveis de ambiente ou fazer com que o processo de compilação
    // as solicite.
    signingConfigs {
        release {
            storeFile file("myreleasekey.keystore")
            storePassword "password"
            keyAlias "MyReleaseKey"
            keyPassword "password"
        }
    }

    buildTypes {

        release {
            applicationIdSuffix = ".release"
            minifyEnabled true // Enables code shrinking for the release build type.
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }

        debug {
            applicationIdSuffix = ".debug"
        }

        /**
         * The `initWith` property allows you to copy configurations from other build types,
         * then configure only the settings you want to change. This one copies the debug build
         * type, and then changes the manifest placeholder and application ID.
         */
        create("staging") {
            applicationIdSuffix = ".staging"
            initWith(getByName("debug"))
            manifestPlaceholders["hostName"] = "internal.example.com"

        }
    }

    flavorDimensions "api"
    flavorDimensions "tier"
    flavorDimensions "mode"

    productFlavors {

        create("free") {
            dimension "tier"
            applicationId = "com.example.myapp.free"
            applicationIdSuffix = ".free"
            minSdkVersion 29
            versionCode 1
            versionName '1.0'
        }
        create("paid") {
            dimension "tier"
            applicationId = "com.example.myapp.paid"
            applicationIdSuffix = ".paid"
            minSdkVersion 29
            versionCode 1
            versionName '1.0'
        }

        create("pro") {
            applicationIdSuffix = ".pro"
        }
        create("full") {
            dimension "mode"
            applicationIdSuffix = ".full"
            versionNameSuffix = "-full"
        }
        create("demo") {
            // Assigns this product flavor to the "version" flavor dimension.
            // If you are using only one dimension, this property is optional,
            // and the plugin automatically assigns all the module's flavors to
            // that dimension.
            dimension "mode"
            applicationIdSuffix = ".demo"
            versionNameSuffix = "-demo"
        }

        // Configurations in the "api" product flavors override those in "mode"
        // flavors and the defaultConfig block. Gradle determines the priority
        // between flavor dimensions based on the order in which they appear next
        // to the flavorDimensions property above--the first dimension has a higher
        // priority than the second, and so on.
        minApi26 {
            dimension "api"
            minSdkVersion 26
            // To ensure the target device receives the version of the app with
            // the highest compatible API level, assign version codes in increasing
            // value with API level. To learn more about assigning version codes to
            // support app updates and uploading to Google Play, read Multiple APK Support
            versionCode 30000 + android.defaultConfig.versionCode
            versionNameSuffix "-minApi26"
        }
        minApi25 {
            dimension "api"
            minSdkVersion 25
            versionCode 20000 + android.defaultConfig.versionCode
            versionNameSuffix "-minApi25"
        }
        minApi24 {
            dimension "api"
            minSdkVersion 24
            versionCode 10000 + android.defaultConfig.versionCode
            versionNameSuffix "-minApi24"
        }

    }

    // Encapsulates options for running tests.
    testOptions {
        // Changes the directory where Gradle saves test reports. By default, Gradle saves test reports
        // in the path_to_your_project/module_name/build/outputs/reports/ directory.
        // '$rootDir' sets the path relative to the root directory of the current project.
        reportDir "$rootDir/test-reports"
        // Changes the directory where Gradle saves test results. By default, Gradle saves test results
        // in the path_to_your_project/module_name/build/outputs/test-results/ directory.
        // '$rootDir' sets the path relative to the root directory of the current project.
        resultsDir "$rootDir/test-results"
    }

    lintOptions {
        // Turns off checks for the issue IDs you specify.
        disable("TypographyFractions")
        disable("TypographyQuotes")
        // Turns on checks for the issue IDs you specify. These checks are in
        // addition to the default lint checks.
        enable("RtlHardcoded")
        enable("RtlCompat")
        enable("RtlEnabled")
        // To enable checks for only a subset of issue IDs and ignore all others,
        // list the issue IDs with the 'check' property instead. This property overrides
        // any issue IDs you enable or disable using the properties above.
        checkOnly("NewApi", "InlinedApi")
        // If set to true, turns off analysis progress reporting by lint.
        quiet = false
        // if set to true (default), stops the build if errors are found.
        abortOnError = false
        // if true, only report errors.
        ignoreWarnings = true

    }


    variantFilter { variant ->
        def names = variant.flavors*.name
        // To check for a certain build type, use variant.buildType.name == "<buildType>"
        if (names.contains("minApi24") && names.contains("demo")) {
            // Gradle ignores any variants that satisfy the conditions above.
            setIgnore(true)
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    buildFeatures {
        compose true
    }

    composeOptions {
        kotlinCompilerExtensionVersion compose_version
    }

    packagingOptions {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }

    sourceSets {
        // Encapsulates configurations for the main source set.
        main {
            // Changes the directory for Java sources. The default directory is
            // 'src/main/java'.
            java.srcDirs = ['src/main/java']

            // If you list multiple directories, Gradle uses all of them to collect
            // sources. Because Gradle gives these directories equal priority, if
            // you define the same resource in more than one directory, you get an
            // error when merging resources. The default directory is 'src/main/res'.
            res.srcDirs = ['src/main/res']

            // Note: You should avoid specifying a directory which is a parent to one
            // or more other directories you specify. For example, avoid the following:
            // res.srcDirs = ['other/res1', 'other/res1/layouts', 'other/res1/strings']
            // You should specify either only the root 'other/res1' directory, or only the
            // nested 'other/res1/layouts' and 'other/res1/strings' directories.

            // For each source set, you can specify only one Android manifest.
            // By default, Android Studio creates a manifest for your main source
            // set in the src/main/ directory.
            manifest.srcFile 'src/main/AndroidManifest.xml'
        }

        // Create additional blocks to configure other source sets.
        androidTest {

            // If all the files for a source set are located under a single root
            // directory, you can specify that directory using the setRoot property.
            // When gathering sources for the source set, Gradle looks only in locations
            // relative to the root directory you specify. For example, after applying the
            // configuration below for the androidTest source set, Gradle looks for Java
            // sources only in the src/tests/java/ directory.
            setRoot 'src/tests'
        }
    }
}

dependencies {

    implementation 'androidx.core:core-ktx:1.7.0'
    implementation "androidx.compose.ui:ui:$compose_version"
    implementation "androidx.compose.material:material:$compose_version"
    implementation "androidx.compose.ui:ui-tooling-preview:$compose_version"
    implementation 'androidx.activity:activity-compose:1.3.1'
    //Navigation
    implementation("androidx.navigation:navigation-compose:2.5.1")

    androidTestImplementation "androidx.compose.ui:ui-test-junit4:$compose_version"

    debugImplementation "androidx.compose.ui:ui-tooling:$compose_version"
    debugImplementation "androidx.compose.ui:ui-test-manifest:$compose_version"

    //Lifecycle
    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.3.1'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-compose:2.5.0'

    // Retrofit
    implementation 'com.google.code.gson:gson:2.8.6'
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'

    // to use image on compose
    implementation("io.coil-kt:coil-compose:2.1.0")

    testImplementation 'junit:junit:4.13.2'

    //test
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'


    implementation 'com.jakewharton.timber:timber:4.5.1'

}